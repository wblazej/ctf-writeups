import gmpy2

n = 83790217241770949930785127822292134633736157973099853931383028198485119939022553589863171712515159590920355561620948287649289302675837892832944404211978967792836179441682795846147312001618564075776280810972021418434978269714364099297666710830717154344277019791039237445921454207967552782769647647208575607201
ex = 26565552874478429895594150715835574472819014534271940714512961970223616824812349678207505829777946867252164956116701692701674023296773659395833735044077013

gmpy2.get_context().precision = 2048

"""
p = ?
q = ?

n = p * q
p2 = p + q
ex = p2 + q = p + q + q = p + 2q

--
n = p * q
ex = p + 2q
--
p = ex - 2q
n = (ex - 2q) * q
n = exq - 2q^2
2q^2 - exq + n = 0

a = 2
b = -ex
c = n

Δ = ex^2 - 4 * 2 * n = ex^2 - 8n
"""
delta = ex**2 - 8*n

q = [
    (ex + gmpy2.sqrt(delta)) / 4,  # q1 = (ex + sqrt(Δ)) / 4
    (ex - gmpy2.sqrt(delta)) / 4   # q2 = (ex - sqrt(Δ)) / 4
]

for q1 in q:
    q1 = gmpy2.mpz(int(q1))

    if q1.is_prime():
        q = int(q1)
        break

p = int(n / q)

print('p:', p)
print('q:', q)

"""
https://github.com/RsaCtfTool/RsaCtfTool
python RsaCtfTool.py -p <p> -q <q> -e <e> --uncipher <c>
"""
